/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as notbrokenrouteWorkingRouteImport } from './routes/(not_broken_route)/working/route'
import { Route as brokenrouteBrokenRouteImport } from './routes/(broken_route)/broken/route'
import { Route as notbrokenrouteWorkingAnyImport } from './routes/(not_broken_route)/working/$any'

// Create Virtual Routes

const brokenrouteBrokenAnyLazyImport = createFileRoute(
  '/(broken_route)/broken/$any',
)()

// Create/Update Routes

const notbrokenrouteWorkingRouteRoute = notbrokenrouteWorkingRouteImport.update(
  {
    path: '/working',
    getParentRoute: () => rootRoute,
  } as any,
)

const brokenrouteBrokenRouteRoute = brokenrouteBrokenRouteImport.update({
  path: '/broken',
  getParentRoute: () => rootRoute,
} as any)

const brokenrouteBrokenAnyLazyRoute = brokenrouteBrokenAnyLazyImport
  .update({
    path: '/$any',
    getParentRoute: () => brokenrouteBrokenRouteRoute,
  } as any)
  .lazy(() =>
    import('./routes/(broken_route)/broken/$any.lazy').then((d) => d.Route),
  )

const notbrokenrouteWorkingAnyRoute = notbrokenrouteWorkingAnyImport.update({
  path: '/$any',
  getParentRoute: () => notbrokenrouteWorkingRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(broken_route)/broken': {
      id: '/broken'
      path: '/broken'
      fullPath: '/broken'
      preLoaderRoute: typeof brokenrouteBrokenRouteImport
      parentRoute: typeof rootRoute
    }
    '/(not_broken_route)/working': {
      id: '/working'
      path: '/working'
      fullPath: '/working'
      preLoaderRoute: typeof notbrokenrouteWorkingRouteImport
      parentRoute: typeof rootRoute
    }
    '/(not_broken_route)/working/$any': {
      id: '/working/$any'
      path: '/$any'
      fullPath: '/working/$any'
      preLoaderRoute: typeof notbrokenrouteWorkingAnyImport
      parentRoute: typeof notbrokenrouteWorkingRouteImport
    }
    '/(broken_route)/broken/$any': {
      id: '/broken/$any'
      path: '/$any'
      fullPath: '/broken/$any'
      preLoaderRoute: typeof brokenrouteBrokenAnyLazyImport
      parentRoute: typeof brokenrouteBrokenRouteImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  brokenrouteBrokenRouteRoute: brokenrouteBrokenRouteRoute.addChildren({
    brokenrouteBrokenAnyLazyRoute,
  }),
  notbrokenrouteWorkingRouteRoute: notbrokenrouteWorkingRouteRoute.addChildren({
    notbrokenrouteWorkingAnyRoute,
  }),
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/broken",
        "/working"
      ]
    },
    "/broken": {
      "filePath": "(broken_route)/broken/route.tsx",
      "children": [
        "/broken/$any"
      ]
    },
    "/working": {
      "filePath": "(not_broken_route)/working/route.tsx",
      "children": [
        "/working/$any"
      ]
    },
    "/working/$any": {
      "filePath": "(not_broken_route)/working/$any.tsx",
      "parent": "/working"
    },
    "/broken/$any": {
      "filePath": "(broken_route)/broken/$any.lazy.tsx",
      "parent": "/broken"
    }
  }
}
ROUTE_MANIFEST_END */
